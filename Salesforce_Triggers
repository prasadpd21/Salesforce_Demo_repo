//Trigger case study 
//2. Create a custom integer field on account which will represent the no of contacts to be created related to the same Account record
//AFTER_INSERT

public class AccountHandler {
 
    public static void run(){
        Switch on Trigger.OperationType{
            when BEFORE_INSERT{
                //beforeInsert(Trigger.new);
            }
            when AFTER_INSERT{	
                afterInsert(Trigger.new);
            }
        }
    }
    
    public static void afterInsert(list<Account>newList){
        set<Id> accId = new set<Id>();
        list<Contact> ContactUpdateList = new list<Contact>();
        integer Count;
        for(Account acc:newList){
            accId.add(acc.Id);
            Count = (Integer)acc.Number_Of_Locations__c;
            for(integer i=1;i<=Count;i++){
                Contact obj = new Contact();
                obj.LastName = 'Trigger Created '+ i;
                obj.AccountId = acc.Id;
                ContactUpdateList.add(obj);
            }
        }
        try{
            if(ContactUpdateList.size()>0){
                Insert ContactUpdateList;
                system.debug('ContactUpdateList--> '+ContactUpdateList);
            }
        }
        catch(exception e){
            system.debug('Error--> '+e.getMessage());
        }
    }
}

/*
@Author : Prasad Deshmukh
@CreatedDate : 15 March 2022
@Description : Opportunity LineItem TriggerHandler to update product codes of added products to an opportunity(comma separated)
*/
public class OpportunityLineItemTriggerHandler {
    
    public static void run(){
        Switch on Trigger.OperationType{
            when AFTER_INSERT{	
                afterInsert(Trigger.new);
            }
            when AFTER_UPDATE{
                afterInsert(Trigger.new);
            }
            when AFTER_DELETE{
                afterInsert(Trigger.old);
            }
        }
    }
    
    public static void afterInsert(list<OpportunityLineItem>oliList){
        list<Id> OppsIdList = new list<Id>();
        list<Opportunity> OppsUpdateList = new list<Opportunity>();
        String CodeString;
        for (OpportunityLineItem Ol:oliList){
            OppsIdList.add(Ol.OpportunityId);
        }
        map<Id,list<OpportunityLineItem>> newmap = new map <Id,list<OpportunityLineItem>>();
        
        if(OppsIdList.size()>0){
            for(OpportunityLineItem Ol:[Select Id,ProductCode,OpportunityId FROM OpportunityLineItem where OpportunityId IN :OppsIdList]){
                if(!newmap.containskey(Ol.OpportunityId)){
                    newmap.put(Ol.OpportunityId,new list<OpportunityLineItem>());
                }
                newmap.get(Ol.OpportunityId).add(Ol);
            }
        }
        
        if(OppsIdList.size()>0){
            for(Opportunity Opp:[Select Id,Opp__c from Opportunity where Id IN:OppsIdList]){
                CodeString = '';
                if(newmap.containsKey(Opp.Id) && newmap.get(Opp.Id).size() > 0){
                    for(OpportunityLineItem Ol:newmap.get(Opp.Id)){
                        if(!CodeString.contains(Ol.ProductCode)){
                            CodeString = CodeString + Ol.ProductCode + ',';
                            system.debug('first CodeString'+CodeString);
                        }
                        
                    }
                    CodeString = CodeString.removeEnd(',');
                    system.debug('last CodeString'+CodeString);
                    Opp.Opp__c = CodeString;
                }
                else{
                    Opp.Opp__c = NULL;
                }
                OppsUpdateList.add(Opp);
            }
        }
        try{
            if(OppsUpdateList.size()>0){
                Update OppsUpdateList;
                system.debug('OppsUpdateList'+OppsUpdateList);
            }
        }
        catch(Exception e){
            system.debug('Exception'+e.getMessage());
        }
    }
}

//@future method to implement asynchronous apex

public class FutureDemo {
    
    public static void mixDml(){
        Account acc= new Account();
        acc.Name = 'Future demo class002';
        Insert acc;
        //list<User> Userlist = new list<User>();
       //User uc= [Select Id,Name from User where Name = 'Trigger TestUser'];
        Profile p = [select Id  from Profile where name = 'Standard User'];
        UserRole r= [select Id  from UserRole where name ='COO'];
       User u = new User();
        u.LastName = 'ApexCreated';
        u.Alias = 'test002';
        u.Username = 'Demouser1010@gmail.com';
        u.Email = 'Demouser10@gmail.com';
        u.EmailEncodingKey = 'UTF-8';
        u.LanguageLocaleKey = 'en_US';
        u.LocaleSidKey = 'en_US';
        u.TimeZoneSidKey = 'America/Los_Angeles';
        u.ProfileId = p.Id;
        u.UserRoleId = r.Id;
        insert u;
    }
}